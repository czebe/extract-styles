#!/usr/bin/env node
/* eslint-disable no-console */

import {red, bold} from 'chalk';
import defaults from 'defaults';
import indentString from 'indent-string';
import inquirer from 'inquirer';
import {PathPrompt} from 'inquirer-path';
import meow from 'meow';
import _ from 'lodash';

import {listFiles, readFile, saveFile} from './lib/io';
import {parse} from './lib/scssParser';
import * as Prompts from './lib/prompts';

inquirer.registerPrompt('path', PathPrompt);

const cli = meow(`
	Usage
		$ extract-styles [options]
		
	Options
		--root [path] Start searching for .scss files here. Defaults to current project directory root.
		--output [path] Output file path for the default theme to be saved.
		--template [path] Optional: the template file for the resulting theme (include all custom imports etc).
		--mark [string] Optional: a custom theme mark, that you'll use in comments to mark a line to be included in the theme. Default: @theme
		
	Examples
		$ extract-styles
		$ extract-styles --root src/components --output src/styles/themes/default/theme.scss --template src/styles/themes/theme.tpl	
`);

const DEFAULT_TEMPLATE = `
/*
	File auto generated by 'npm run extract-styles'.
	Do not modify this file directly.
	To create a new theme, copy the 'default' theme and edit the newly created theme instead.
*/

.theme-default {

<%= theme %>

}
`;

const processFiles = async (options) => {

	if (options.template) {
		options.template = await readFile(options.template);
	}

	options = defaults(options, {
		template: DEFAULT_TEMPLATE
	});

	if (!options.root) {
		await inquirer.prompt([
			Prompts.root()
		]).then((answers) => {
			options = defaults(options, {
				root: answers.root || process.cwd()
			});
		});
	}

	await listFiles(options.root)
		.then((files) => {
			if (files.length) {
				const filesRead = files.map(file => readFile(file));
				return Promise.all(filesRead);
			} else {
				// console.log(red(bold('No *.scss files found under current directory. Try supplying a different --root path.')));
				throw new Error(red(bold('No *.scss files found under current directory. Try supplying a different --root path.')));
				// process.exit();
			}
		})
		.then(async (filesRead) => {
			if (!options.output) {
				await inquirer.prompt([
					Prompts.output()
				]).then((answers) => {
					options = defaults(options, {
						output: answers.output
					});
				});
			}

			const compiled = _.template(options.template);
			const themes = filesRead.map(scss => parse(scss, options.mark));
			const themeContent = compiled({theme: indentString(themes.join('\n\n').replace(/^\s*[\r\n]{2,}/gm, ''), 1, '\t')});
			return saveFile(themeContent, options.output, 'Theme file written to: ');
		});
};

processFiles(cli.flags);
